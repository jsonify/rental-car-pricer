name: Car Rental Price Tracker CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 0 * * *'  # Run daily at midnight UTC

jobs:
  test:
    runs-on: macos-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Download and install Chrome for Testing
      run: |
        # Create directories
        mkdir -p $HOME/chrome-for-testing
        
        # Get latest version
        LATEST_VERSION=$(curl -s https://googlechromelabs.github.io/chrome-for-testing/LATEST_RELEASE_STABLE)
        echo "Latest Chrome version: $LATEST_VERSION"
        
        # Download Chrome for Testing
        curl -L "https://storage.googleapis.com/chrome-for-testing-public/${LATEST_VERSION}/mac-x64/chrome-mac-x64.zip" -o $HOME/chrome-for-testing/chrome.zip
        
        # Extract Chrome
        unzip -q $HOME/chrome-for-testing/chrome.zip -d $HOME/chrome-for-testing/
        
        # Make executable
        chmod +x $HOME/chrome-for-testing/chrome-mac-x64/Google\ Chrome\ for\ Testing.app/Contents/MacOS/Google\ Chrome\ for\ Testing

    - name: Download and install ChromeDriver
      run: |
        # Get the latest Chrome version from previous step
        LATEST_VERSION=$(curl -s https://googlechromelabs.github.io/chrome-for-testing/LATEST_RELEASE_STABLE)
        echo "Installing ChromeDriver for Chrome version: $LATEST_VERSION"
        
        # Download matching ChromeDriver
        curl -L "https://storage.googleapis.com/chrome-for-testing-public/${LATEST_VERSION}/mac-x64/chromedriver-mac-x64.zip" -o chromedriver.zip
        
        # Extract ChromeDriver
        unzip -q chromedriver.zip
        
        # Make executable and move to /usr/local/bin
        chmod +x chromedriver-mac-x64/chromedriver
        sudo mv chromedriver-mac-x64/chromedriver /usr/local/bin/

    - name: Verify installations
      run: |
        echo "Chrome version:"
        "$HOME/chrome-for-testing/chrome-mac-x64/Google Chrome for Testing.app/Contents/MacOS/Google Chrome for Testing" --version
        echo "ChromeDriver version:"
        chromedriver --version

    - name: Create .env file
      run: |
        echo "CHROME_BINARY_PATH=$HOME/chrome-for-testing/chrome-mac-x64/Google Chrome for Testing.app/Contents/MacOS/Google Chrome for Testing" >> .env
        echo "CHROMEDRIVER_PATH=/usr/local/bin/chromedriver" >> .env
        echo "USER_AGENT=Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36" >> .env
        echo "PICKUP_LOCATION=LIH" >> .env
        echo "PICKUP_DATE=04/03/2025" >> .env
        echo "DROPOFF_DATE=04/10/2025" >> .env
        echo "FOCUS_CATEGORY=Economy Car" >> .env
        echo "SMTP_SERVER=${{ secrets.SMTP_SERVER }}" >> .env
        echo "SMTP_PORT=${{ secrets.SMTP_PORT }}" >> .env
        echo "SENDER_EMAIL=${{ secrets.SENDER_EMAIL }}" >> .env
        echo "SENDER_PASSWORD=${{ secrets.SENDER_PASSWORD }}" >> .env
        echo "RECIPIENT_EMAIL=${{ secrets.RECIPIENT_EMAIL }}" >> .env

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov flake8 black mypy selenium-wire

    - name: Run code formatting check
      run: |
        black --check .
        flake8 . --max-line-length=100 --exclude=.git,__pycache__,build,dist

    - name: Run type checking
      run: |
        mypy . --ignore-missing-imports

    - name: Run tests with coverage
      run: |
        pytest --cov=./ --cov-report=xml

    - name: Upload coverage report
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: true

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Create deployment package
      run: |
        zip -r deploy.zip . -x "*.git*" "*.pytest_cache*" "__pycache__/*" "*.coverage" "*.xml"

    - name: Store deployment artifact
      uses: actions/upload-artifact@v3
      with:
        name: deploy-package
        path: deploy.zip