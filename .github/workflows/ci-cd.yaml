name: Car Rental Price Tracker CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 0 * * *'  # Run daily at midnight UTC

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Install Chrome and ChromeDriver
      run: |
        # Install Chrome
        wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
        sudo sh -c 'echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/sources.list.d/google.list'
        sudo apt-get update
        sudo apt-get install -y google-chrome-stable
        
        # Get Chrome version and install matching ChromeDriver
        CHROME_VERSION=$(google-chrome --version | cut -d ' ' -f 3 | cut -d '.' -f 1)
        CHROMEDRIVER_VERSION=$(curl -s "https://chromedriver.storage.googleapis.com/LATEST_RELEASE_$CHROME_VERSION")
        wget -q "https://chromedriver.storage.googleapis.com/${CHROMEDRIVER_VERSION}/chromedriver_linux64.zip"
        unzip chromedriver_linux64.zip
        sudo mv chromedriver /usr/local/bin/
        sudo chmod +x /usr/local/bin/chromedriver

    - name: Verify installations
      run: |
        echo "Chrome version:"
        google-chrome --version
        echo "ChromeDriver version:"
        chromedriver --version

    - name: Create .env file
      run: |
        echo "CHROME_BINARY_PATH=/usr/bin/google-chrome" >> .env
        echo "CHROMEDRIVER_PATH=/usr/local/bin/chromedriver" >> .env
        echo "USER_AGENT=Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36" >> .env
        echo "PICKUP_LOCATION=LIH" >> .env
        echo "PICKUP_DATE=04/03/2025" >> .env
        echo "DROPOFF_DATE=04/10/2025" >> .env
        echo "FOCUS_CATEGORY=Economy Car" >> .env
        echo "SMTP_SERVER=${{ secrets.SMTP_SERVER }}" >> .env
        echo "SMTP_PORT=${{ secrets.SMTP_PORT }}" >> .env
        echo "SENDER_EMAIL=${{ secrets.SENDER_EMAIL }}" >> .env
        echo "SENDER_PASSWORD=${{ secrets.SENDER_PASSWORD }}" >> .env
        echo "RECIPIENT_EMAIL=${{ secrets.RECIPIENT_EMAIL }}" >> .env

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov flake8 black mypy selenium-wire

    - name: Run code formatting check
      run: |
        black --check .
        flake8 . --max-line-length=100 --exclude=.git,__pycache__,build,dist

    - name: Run type checking
      run: |
        mypy . --ignore-missing-imports

    - name: Run tests with coverage
      run: |
        pytest --cov=./ --cov-report=xml

    - name: Upload coverage report
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: true

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Create deployment package
      run: |
        zip -r deploy.zip . -x "*.git*" "*.pytest_cache*" "__pycache__/*" "*.coverage" "*.xml"

    - name: Store deployment artifact
      uses: actions/upload-artifact@v3
      with:
        name: deploy-package
        path: deploy.zip