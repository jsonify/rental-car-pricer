name: Car Rental Price Tracker

on:
  schedule:
    - cron: '0 14 * * 1'  # Run every Monday at 6 AM PST (14:00 UTC)
  workflow_dispatch:
    inputs:
      update_holding_prices:
        description: 'Do you want to update any holding prices?'
        type: boolean
        default: false
      booking_1_price:
        description: 'New holding price for Booking 1 (leave empty to keep current)'
        required: false
        type: string
      booking_2_price:
        description: 'New holding price for Booking 2 (leave empty to keep current)'
        required: false
        type: string
      booking_3_price:
        description: 'New holding price for Booking 3 (leave empty to keep current)'
        required: false
        type: string

jobs:
  check-prices:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Download and install Chrome for Testing
      run: |
        # Create Chrome directory
        sudo mkdir -p /opt/chrome
        
        # Get latest version
        LATEST_VERSION=$(curl -s https://googlechromelabs.github.io/chrome-for-testing/LATEST_RELEASE_STABLE)
        echo "Latest Chrome version: $LATEST_VERSION"
        
        # Download Chrome for Testing
        curl -L "https://storage.googleapis.com/chrome-for-testing-public/${LATEST_VERSION}/linux64/chrome-linux64.zip" -o chrome.zip
        
        # Extract Chrome to /opt/chrome
        sudo unzip -q chrome.zip -d /opt/chrome/
        
        # Make executable and create symlink
        sudo chmod +x /opt/chrome/chrome-linux64/chrome
        sudo ln -sf /opt/chrome/chrome-linux64/chrome /usr/bin/chrome
        
        # Verify installation
        echo "Chrome binary location:"
        ls -l /opt/chrome/chrome-linux64/chrome
        echo "Chrome version:"
        /opt/chrome/chrome-linux64/chrome --version

    - name: Download and install ChromeDriver
      run: |
        LATEST_VERSION=$(curl -s https://googlechromelabs.github.io/chrome-for-testing/LATEST_RELEASE_STABLE)
        echo "Installing ChromeDriver for Chrome version: $LATEST_VERSION"
        curl -L "https://storage.googleapis.com/chrome-for-testing-public/${LATEST_VERSION}/linux64/chromedriver-linux64.zip" -o chromedriver.zip
        unzip -q chromedriver.zip
        sudo chmod +x chromedriver-linux64/chromedriver
        sudo mv chromedriver-linux64/chromedriver /usr/bin/chromedriver
        
        # Verify installation
        echo "ChromeDriver location:"
        which chromedriver
        echo "ChromeDriver version:"
        chromedriver --version

    - name: Install Chrome dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libnss3 libgdk-pixbuf2.0-0 libgtk-3-0 libxss1 libasound2

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        sudo apt-get update
        sudo apt-get install -y jq

    - name: Create screenshots directory
      run: mkdir -p screenshots

    - name: Process bookings and holding prices
      id: process_bookings
      run: |
        # Create a Python script to handle the bookings and prices
        cat << 'EOF' > process_bookings.py
        import json
        import os
        
        def format_price(price):
            try:
                return f"${float(price):.2f}"
            except:
                return "N/A"
        
        # Load current price history
        with open('price_history.json', 'r') as f:
            price_history = json.load(f)
        
        # Get all bookings
        bookings = price_history.get('bookings', {})
        
        # Create a mapping file for booking IDs to input numbers
        booking_map = {}
        print("\n=== Current Bookings ===")
        print("{:<5} {:<15} {:<20} {:<25} {:<15}".format(
            "Num", "Location", "Dates", "Category", "Current Price"
        ))
        print("-" * 80)
        
        for i, (booking_id, booking) in enumerate(bookings.items(), 1):
            booking_map[f"booking_{i}"] = booking_id
            print("{:<5} {:<15} {:<20} {:<25} {:<15}".format(
                f"[{i}]",
                booking['location'],
                f"{booking['pickup_date']} to {booking['dropoff_date']}",
                booking['focus_category'],
                format_price(booking.get('holding_price', 'N/A'))
            ))
        
        # Save the mapping for other steps
        with open('booking_map.json', 'w') as f:
            json.dump(booking_map, f, indent=2)
        
        # Write first booking details to GITHUB_ENV
        if bookings:
            first_booking = next(iter(bookings.values()))
            with open(os.environ['GITHUB_ENV'], 'a') as f:
                f.write(f"PICKUP_LOCATION={first_booking['location']}\n")
                f.write(f"PICKUP_DATE={first_booking['pickup_date']}\n")
                f.write(f"DROPOFF_DATE={first_booking['dropoff_date']}\n")
                f.write(f"FOCUS_CATEGORY={first_booking['focus_category']}\n")
                f.write(f"PICKUP_TIME={first_booking.get('pickup_time', '12:00 PM')}\n")
                f.write(f"DROPOFF_TIME={first_booking.get('dropoff_time', '12:00 PM')}\n")
        
        # Set output for GitHub Actions
        with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
            f.write(f"booking_count={len(bookings)}\n")
        EOF
        
        # Run the Python script
        python process_bookings.py

    - name: Update holding prices
      if: github.event.inputs.update_holding_prices == 'true'
      run: |
        # Create Python script to update prices
        cat << 'EOF' > update_prices.py
        import json
        import os
        
        # Load the booking map
        with open('booking_map.json', 'r') as f:
            booking_map = json.load(f)
        
        # Load the current price history
        with open('price_history.json', 'r') as f:
            price_history = json.load(f)
        
        # Process each booking input
        updates_made = False
        for i in range(1, len(booking_map) + 1):
            input_price = os.getenv(f'BOOKING_{i}_PRICE', '').strip()
            if input_price:
                booking_id = booking_map[f'booking_{i}']
                try:
                    new_price = float(input_price)
                    price_history['bookings'][booking_id]['holding_price'] = new_price
                    print(f"✅ Updated Booking {i} ({booking_id}) holding price to ${new_price:.2f}")
                    updates_made = True
                except ValueError:
                    print(f"❌ Invalid price format for Booking {i}: {input_price}")
        
        if updates_made:
            # Save the updated price history
            with open('price_history.json', 'w') as f:
                json.dump(price_history, f, indent=2)
            print("\nSuccessfully updated price_history.json")
        else:
            print("\nNo price updates were made")
        EOF
        
        # Set environment variables for the prices
        export BOOKING_1_PRICE="${{ github.event.inputs.booking_1_price }}"
        export BOOKING_2_PRICE="${{ github.event.inputs.booking_2_price }}"
        export BOOKING_3_PRICE="${{ github.event.inputs.booking_3_price }}"
        
        # Run the update script
        python update_prices.py
        
        # Show updated prices
        echo "\nCurrent booking prices after updates:"
        jq -r '.bookings | to_entries[] | "\(.value.location) (\(.value.pickup_date) to \(.value.dropoff_date)): $\(.value.holding_price)"' price_history.json

    - name: Run price checker
      env:
        CI: true
        CHROME_BINARY_PATH: /opt/chrome/chrome-linux64/chrome
        CHROMEDRIVER_PATH: /usr/bin/chromedriver
        USER_AGENT: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36
        SMTP_SERVER: ${{ secrets.SMTP_SERVER }}
        SMTP_PORT: ${{ secrets.SMTP_PORT }}
        SENDER_EMAIL: ${{ secrets.SENDER_EMAIL }}
        SENDER_PASSWORD: ${{ secrets.SENDER_PASSWORD }}
        RECIPIENT_EMAIL: ${{ secrets.RECIPIENT_EMAIL }}
      run: |
        echo "Starting price checker in automated mode..."
        echo "Environment variables:"
        echo "FOCUS_CATEGORY: $FOCUS_CATEGORY"
        echo "PICKUP_LOCATION: $PICKUP_LOCATION"
        echo "PICKUP_DATE: $PICKUP_DATE"
        echo "DROPOFF_DATE: $DROPOFF_DATE"
        
        # Create .env file for the price checker
        cat << EOF > .env
        CI=true
        CHROME_BINARY_PATH=/opt/chrome/chrome-linux64/chrome
        CHROMEDRIVER_PATH=/usr/bin/chromedriver
        USER_AGENT=Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36
        PICKUP_LOCATION=$PICKUP_LOCATION
        PICKUP_DATE=$PICKUP_DATE
        DROPOFF_DATE=$DROPOFF_DATE
        FOCUS_CATEGORY=$FOCUS_CATEGORY
        PICKUP_TIME=$PICKUP_TIME
        DROPOFF_TIME=$DROPOFF_TIME
        SMTP_SERVER=${{ secrets.SMTP_SERVER }}
        SMTP_PORT=${{ secrets.SMTP_PORT }}
        SENDER_EMAIL=${{ secrets.SENDER_EMAIL }}
        SENDER_PASSWORD=${{ secrets.SENDER_PASSWORD }}
        RECIPIENT_EMAIL=${{ secrets.RECIPIENT_EMAIL }}
        EOF
        
        export CHROME_OPTIONS="--headless --no-sandbox --disable-dev-shm-usage --disable-gpu"
        python main.py

    - name: Save price history
      if: success() || failure()
      uses: actions/upload-artifact@v3
      with:
        name: price-history-${{ github.run_id }}
        path: |
          price_history.json
          rental_prices.txt
          screenshots/*.png

    - name: Clean up sensitive files
      if: always()
      run: |
        rm -f .env
        rm -f update_prices.py
        rm -f process_bookings.py
        rm -f booking_map.json