name: Car Rental Price Tracker

on:
  schedule:
    - cron: '0 */6 * * *'  # Run every 6 hours
  workflow_dispatch:  # Allow manual trigger

jobs:
  check-prices:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Download and install Chrome for Testing
      run: |
        mkdir -p $HOME/chrome-for-testing
        
        # Get latest version
        LATEST_VERSION=$(curl -s https://googlechromelabs.github.io/chrome-for-testing/LATEST_RELEASE_STABLE)
        echo "Latest Chrome version: $LATEST_VERSION"
        
        # Download Chrome for Testing
        curl -L "https://storage.googleapis.com/chrome-for-testing-public/${LATEST_VERSION}/linux64/chrome-linux64.zip" -o $HOME/chrome-for-testing/chrome.zip
        
        # Extract Chrome
        unzip -q $HOME/chrome-for-testing/chrome.zip -d $HOME/chrome-for-testing/
        
        # Make executable
        chmod +x $HOME/chrome-for-testing/chrome-linux64/chrome

    - name: Download and install ChromeDriver
      run: |
        LATEST_VERSION=$(curl -s https://googlechromelabs.github.io/chrome-for-testing/LATEST_RELEASE_STABLE)
        echo "Installing ChromeDriver for Chrome version: $LATEST_VERSION"
        curl -L "https://storage.googleapis.com/chrome-for-testing-public/${LATEST_VERSION}/linux64/chromedriver-linux64.zip" -o chromedriver.zip
        unzip -q chromedriver.zip
        chmod +x chromedriver-linux64/chromedriver
        sudo mv chromedriver-linux64/chromedriver /usr/local/bin/

    - name: Install Chrome dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libnss3 libgdk-pixbuf2.0-0 libgtk-3-0 libxss1 libasound2

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Create screenshots directory
      run: mkdir -p screenshots

    - name: Install jq
      run: sudo apt-get install -y jq

    - name: Set up environment
      run: |
        # Extract values from the first booking in price_history.json
        FIRST_BOOKING=$(jq -r '
          .bookings 
          | to_entries 
          | .[0].value 
          | {
            location: .location,
            pickup_date: .pickup_date,
            dropoff_date: .dropoff_date,
            focus_category: .focus_category
          }
        ' price_history.json)
        
        # Extract individual values
        LOCATION=$(echo $FIRST_BOOKING | jq -r '.location')
        PICKUP_DATE=$(echo $FIRST_BOOKING | jq -r '.pickup_date')
        DROPOFF_DATE=$(echo $FIRST_BOOKING | jq -r '.dropoff_date')
        FOCUS_CATEGORY=$(echo $FIRST_BOOKING | jq -r '.focus_category')
        
        echo "Extracted values from price_history.json:"
        echo "Location: $LOCATION"
        echo "Pickup Date: $PICKUP_DATE"
        echo "Dropoff Date: $DROPOFF_DATE"
        echo "Focus Category: $FOCUS_CATEGORY"

        # Create .env file with all required variables
        cat << EOF > .env
        CI=true
        CHROME_BINARY_PATH=$HOME/chrome-for-testing/chrome-linux64/chrome
        CHROMEDRIVER_PATH=/usr/local/bin/chromedriver
        USER_AGENT=Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36
        PICKUP_LOCATION=$LOCATION
        PICKUP_DATE=$PICKUP_DATE
        DROPOFF_DATE=$DROPOFF_DATE
        FOCUS_CATEGORY=$FOCUS_CATEGORY
        SMTP_SERVER=${{ secrets.SMTP_SERVER }}
        SMTP_PORT=${{ secrets.SMTP_PORT }}
        SENDER_EMAIL=${{ secrets.SENDER_EMAIL }}
        SENDER_PASSWORD=${{ secrets.SENDER_PASSWORD }}
        RECIPIENT_EMAIL=${{ secrets.RECIPIENT_EMAIL }}
        EOF
        
        echo "Created .env file with required variables"
        echo "Environment file contents (excluding secrets):"
        grep -v "PASSWORD" .env || true

    - name: Run price checker
      run: |
        echo "Starting price checker in automated mode..."
        # Set Chrome options for headless execution
        export CHROME_OPTIONS="--headless --no-sandbox --disable-dev-shm-usage --disable-gpu"
        python main.py

    - name: Save price history
      if: success() || failure()
      uses: actions/upload-artifact@v3
      with:
        name: price-history-${{ github.run_id }}
        path: |
          price_history.json
          rental_prices.txt
          screenshots/*.png

    - name: Clean up sensitive files
      if: always()
      run: rm -f .env