name: Car Rental Price Tracker

on:
  schedule:
    - cron: '0 14 * * 1'  # Run every Monday at 6 AM PST (14:00 UTC)
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        type: choice
        options:
          - check-prices
          - add-booking
          - update-holding-prices
          - delete-booking 
        required: true
        default: 'check-prices'
      new_booking_location:
        description: 'Airport code (e.g., KOA)'
        required: false
        type: string
      new_booking_pickup_date:
        description: 'Pickup date (MM/DD/YYYY)'
        required: false
        type: string
      new_booking_dropoff_date:
        description: 'Dropoff date (MM/DD/YYYY)'
        required: false
        type: string
      new_booking_category:
        description: 'Vehicle category (exact match from website)'
        required: false
        type: string
      new_booking_holding_price:
        description: 'Initial holding price (optional)'
        required: false
        type: string
      booking_1_price:
        description: 'New holding price for Booking 1'
        required: false
        type: string
      booking_2_price:
        description: 'New holding price for Booking 2'
        required: false
        type: string
      booking_3_price:
        description: 'New holding price for Booking 3'
        required: false
        type: string
      booking_to_delete:
        description: 'Booking number to delete (1-3)'
        required: false
        type: string

jobs:
  manage-bookings:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install python-dotenv selenium webdriver_manager

    - name: Setup Chrome and ChromeDriver
      if: github.event.inputs.action == 'check-prices' || github.event_name == 'schedule'
      run: |
        # Create Chrome directory
        sudo mkdir -p /opt/chrome
        
        # Get latest version
        LATEST_VERSION=$(curl -s https://googlechromelabs.github.io/chrome-for-testing/LATEST_RELEASE_STABLE)
        echo "Latest Chrome version: $LATEST_VERSION"
        
        # Download Chrome for Testing
        curl -L "https://storage.googleapis.com/chrome-for-testing-public/${LATEST_VERSION}/linux64/chrome-linux64.zip" -o chrome.zip
        sudo unzip -q chrome.zip -d /opt/chrome/
        sudo chmod +x /opt/chrome/chrome-linux64/chrome
        sudo ln -sf /opt/chrome/chrome-linux64/chrome /usr/bin/chrome
        
        # Download ChromeDriver
        curl -L "https://storage.googleapis.com/chrome-for-testing-public/${LATEST_VERSION}/linux64/chromedriver-linux64.zip" -o chromedriver.zip
        unzip -q chromedriver.zip
        sudo chmod +x chromedriver-linux64/chromedriver
        sudo mv chromedriver-linux64/chromedriver /usr/bin/chromedriver
        
        # Install Chrome dependencies
        sudo apt-get update
        sudo apt-get install -y libnss3 libgdk-pixbuf2.0-0 libgtk-3-0 libxss1 libasound2
        
        # Verify installations
        echo "Chrome version:"
        /usr/bin/chrome --version
        echo "ChromeDriver version:"
        /usr/bin/chromedriver --version
    - name: Add new booking
      if: github.event.inputs.action == 'add-booking'
      env:
        NEW_BOOKING_LOCATION: ${{ github.event.inputs.new_booking_location }}
        NEW_BOOKING_PICKUP_DATE: ${{ github.event.inputs.new_booking_pickup_date }}
        NEW_BOOKING_DROPOFF_DATE: ${{ github.event.inputs.new_booking_dropoff_date }}
        NEW_BOOKING_CATEGORY: ${{ github.event.inputs.new_booking_category }}
        NEW_BOOKING_HOLDING_PRICE: ${{ github.event.inputs.new_booking_holding_price }}
      run: |
        python - << 'EOL'
        import json
        import os
        from datetime import datetime
        import sys

        def validate_date(date_str):
            try:
                return bool(datetime.strptime(date_str, "%m/%d/%Y"))
            except ValueError:
                return False

        def add_booking():
            # Get environment variables
            location = os.environ.get('NEW_BOOKING_LOCATION', '').strip().upper()
            pickup_date = os.environ.get('NEW_BOOKING_PICKUP_DATE', '').strip()
            dropoff_date = os.environ.get('NEW_BOOKING_DROPOFF_DATE', '').strip()
            category = os.environ.get('NEW_BOOKING_CATEGORY', '').strip()
            holding_price = os.environ.get('NEW_BOOKING_HOLDING_PRICE', '').strip()

            print(f"Adding new booking with parameters:")
            print(f"Location: {location}")
            print(f"Pickup: {pickup_date}")
            print(f"Dropoff: {dropoff_date}")
            print(f"Category: {category}")
            print(f"Holding Price: {holding_price}")

            # Validate inputs
            if not location or len(location) != 3 or not location.isalpha():
                print(f"❌ Invalid airport code: {location}")
                return False
                
            if not validate_date(pickup_date):
                print(f"❌ Invalid pickup date: {pickup_date}")
                return False
                
            if not validate_date(dropoff_date):
                print(f"❌ Invalid dropoff date: {dropoff_date}")
                return False

            if not category:
                print("❌ Category is required")
                return False

            # Load or create price history
            try:
                with open('price_history.json', 'r') as f:
                    price_history = json.load(f)
                    print("Successfully loaded existing price_history.json")
            except FileNotFoundError:
                print("Creating new price_history.json")
                price_history = {
                    "metadata": {
                        "last_updated": datetime.now().isoformat(),
                        "active_bookings": []
                    },
                    "bookings": {}
                }

            # Create booking ID
            booking_id = f"{location}_{pickup_date}_{dropoff_date}".replace("/", "")

            # Create new booking
            new_booking = {
                "location": location,
                "location_full_name": f"{location} Airport",
                "pickup_date": pickup_date,
                "dropoff_date": dropoff_date,
                "pickup_time": "12:00 PM",
                "dropoff_time": "12:00 PM",
                "focus_category": category,
                "price_history": [],
                "created_at": datetime.now().isoformat()
            }

            if holding_price:
                try:
                    new_booking["holding_price"] = float(holding_price)
                except ValueError:
                    print(f"Warning: Invalid holding price format: {holding_price}")

            # Add to price history
            price_history["bookings"][booking_id] = new_booking
            if "active_bookings" not in price_history["metadata"]:
                price_history["metadata"]["active_bookings"] = []
            if booking_id not in price_history["metadata"]["active_bookings"]:
                price_history["metadata"]["active_bookings"].append(booking_id)

            # Save updated price history
            try:
                with open('price_history.json', 'w') as f:
                    json.dump(price_history, f, indent=2)
                print("Successfully saved updated price_history.json")
            except Exception as e:
                print(f"❌ Error saving price_history.json: {str(e)}")
                return False

            print(f"✅ Successfully added new booking: {booking_id}")
            print(f"Location: {location}")
            print(f"Dates: {pickup_date} to {dropoff_date}")
            print(f"Category: {category}")
            if holding_price:
                print(f"Holding price: {float(holding_price):.2f}")
            return True

        if not add_booking():
            sys.exit(1)
        EOL

    - name: Update holding prices
      if: github.event.inputs.action == 'update-holding-prices'
      env:
        BOOKING_1_PRICE: ${{ github.event.inputs.booking_1_price }}
        BOOKING_2_PRICE: ${{ github.event.inputs.booking_2_price }}
        BOOKING_3_PRICE: ${{ github.event.inputs.booking_3_price }}
      run: |
        python - <<EOF
        import json
        import os
        from datetime import datetime

        try:
            # Load price history
            with open('price_history.json', 'r') as f:
                price_history = json.load(f)

            # Get list of booking IDs
            booking_ids = list(price_history['bookings'].keys())

            # Process each booking price
            updates_made = False
            for i, booking_id in enumerate(booking_ids[:3], 1):
                price_str = os.environ.get(f'BOOKING_{i}_PRICE', '').strip()
                if price_str:
                    try:
                        new_price = float(price_str)
                        price_history['bookings'][booking_id]['holding_price'] = new_price
                        print(f"✅ Updated Booking {i} holding price to ${new_price:.2f}")
                        updates_made = True
                    except ValueError:
                        print(f"❌ Invalid price format for Booking {i}: {price_str}")

            if updates_made:
                # Update last_updated timestamp
                price_history['metadata']['last_updated'] = datetime.now().isoformat()
                
                # Save updated price history
                with open('price_history.json', 'w') as f:
                    json.dump(price_history, f, indent=2)
                print("✅ Successfully saved updated price history")
            else:
                print("ℹ️ No price updates were made")

        except Exception as e:
            print(f"❌ Error updating prices: {str(e)}")
            exit(1)
        EOF

    - name: Delete booking
      if: github.event.inputs.action == 'delete-booking'
      env:
        BOOKING_TO_DELETE: ${{ github.event.inputs.booking_to_delete }}
      run: |
        python delete_booking_cli.py
    - name: Run price checker
      if: github.event.inputs.action == 'check-prices' || github.event_name == 'schedule'
      env:
        CI: true
        CHROME_BINARY_PATH: /usr/bin/chrome
        CHROMEDRIVER_PATH: /usr/bin/chromedriver
        USER_AGENT: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36
        SMTP_SERVER: ${{ secrets.SMTP_SERVER }}
        SMTP_PORT: ${{ secrets.SMTP_PORT }}
        SENDER_EMAIL: ${{ secrets.SENDER_EMAIL }}
        SENDER_PASSWORD: ${{ secrets.SENDER_PASSWORD }}
        RECIPIENT_EMAIL: ${{ secrets.RECIPIENT_EMAIL }}
      run: |
        # Create screenshots directory
        mkdir -p screenshots
        
        # Get first active booking details
        python - << 'EOL'
        import json
        import os
        
        try:
            with open('price_history.json', 'r') as f:
                data = json.load(f)
                
            active_bookings = data.get('metadata', {}).get('active_bookings', [])
            if active_bookings:
                booking = data['bookings'][active_bookings[0]]
                with open('.env', 'w') as f:
                    f.write(f"CI=true\n")
                    f.write(f"CHROME_BINARY_PATH=/usr/bin/chrome\n")
                    f.write(f"CHROMEDRIVER_PATH=/usr/bin/chromedriver\n")
                    f.write(f"USER_AGENT=Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36\n")
                    f.write(f"PICKUP_LOCATION={booking['location']}\n")
                    f.write(f"PICKUP_DATE={booking['pickup_date']}\n")
                    f.write(f"DROPOFF_DATE={booking['dropoff_date']}\n")
                    f.write(f"FOCUS_CATEGORY={booking['focus_category']}\n")
                    f.write(f"PICKUP_TIME={booking.get('pickup_time', '12:00 PM')}\n")
                    f.write(f"DROPOFF_TIME={booking.get('dropoff_time', '12:00 PM')}\n")
                    f.write(f"SMTP_SERVER={os.environ.get('SMTP_SERVER', '')}\n")
                    f.write(f"SMTP_PORT={os.environ.get('SMTP_PORT', '')}\n")
                    f.write(f"SENDER_EMAIL={os.environ.get('SENDER_EMAIL', '')}\n")
                    f.write(f"SENDER_PASSWORD={os.environ.get('SENDER_PASSWORD', '')}\n")
                    f.write(f"RECIPIENT_EMAIL={os.environ.get('RECIPIENT_EMAIL', '')}\n")
                print("✅ Successfully created .env file with booking details")
            else:
                print("❌ No active bookings found")
                exit(1)
        except Exception as e:
            print(f"❌ Error setting up environment: {str(e)}")
            exit(1)
        EOL
        
        # Show contents of .env file (excluding sensitive data)
        echo "Generated .env file contents (sanitized):"
        grep -v "PASSWORD\|EMAIL\|SERVER" .env || true
        
        # Run price checker
        python main.py 
    - name: Commit and push changes
      if: github.event.inputs.action == 'add-booking' || github.event.inputs.action == 'update-holding-prices' || github.event.inputs.action == 'delete-booking'
      run: |
        git config --global user.name "GitHub Actions Bot"
        git config --global user.email "actions@github.com"
        
        if git diff --quiet price_history.json; then
          echo "No changes to commit"
        else
          git add price_history.json
          git commit -m "Update price history via workflow"
          git push origin HEAD:${{ github.ref }}
        fi