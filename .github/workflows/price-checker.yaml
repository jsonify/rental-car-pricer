name: Car Rental Price Tracker

on:
  schedule:
    - cron: '0 */6 * * *'  # Run every 6 hours
  workflow_dispatch:  # Allow manual trigger

jobs:
  check-prices:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Download and install Chrome for Testing
      run: |
        mkdir -p $HOME/chrome-for-testing
        
        # Get latest version
        LATEST_VERSION=$(curl -s https://googlechromelabs.github.io/chrome-for-testing/LATEST_RELEASE_STABLE)
        echo "Latest Chrome version: $LATEST_VERSION"
        
        # Download Chrome for Testing
        curl -L "https://storage.googleapis.com/chrome-for-testing-public/${LATEST_VERSION}/linux64/chrome-linux64.zip" -o $HOME/chrome-for-testing/chrome.zip
        
        # Extract Chrome
        unzip -q $HOME/chrome-for-testing/chrome.zip -d $HOME/chrome-for-testing/
        
        # Make executable
        chmod +x $HOME/chrome-for-testing/chrome-linux64/chrome

    - name: Download and install ChromeDriver
      run: |
        LATEST_VERSION=$(curl -s https://googlechromelabs.github.io/chrome-for-testing/LATEST_RELEASE_STABLE)
        echo "Installing ChromeDriver for Chrome version: $LATEST_VERSION"
        curl -L "https://storage.googleapis.com/chrome-for-testing-public/${LATEST_VERSION}/linux64/chromedriver-linux64.zip" -o chromedriver.zip
        unzip -q chromedriver.zip
        chmod +x chromedriver-linux64/chromedriver
        sudo mv chromedriver-linux64/chromedriver /usr/local/bin/

    - name: Install Chrome dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libnss3 libgdk-pixbuf2.0-0 libgtk-3-0 libxss1 libasound2

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Create screenshots directory
      run: mkdir -p screenshots

    - name: Set up environment
      run: |
        # First verify secrets exist
        if [ -z "${{ secrets.SMTP_SERVER }}" ]; then
          echo "‚ùå SMTP_SERVER secret is not set"
          exit 1
        fi
        if [ -z "${{ secrets.SMTP_PORT }}" ]; then
          echo "‚ùå SMTP_PORT secret is not set"
          exit 1
        fi
        if [ -z "${{ secrets.SENDER_EMAIL }}" ]; then
          echo "‚ùå SENDER_EMAIL secret is not set"
          exit 1
        fi
        if [ -z "${{ secrets.SENDER_PASSWORD }}" ]; then
          echo "‚ùå SENDER_PASSWORD secret is not set"
          exit 1
        fi
        if [ -z "${{ secrets.RECIPIENT_EMAIL }}" ]; then
          echo "‚ùå RECIPIENT_EMAIL secret is not set"
          exit 1
        fi

        # Create .env file
        cat << EOF > .env
        CI=true
        CHROME_BINARY_PATH=$HOME/chrome-for-testing/chrome-linux64/chrome
        CHROMEDRIVER_PATH=/usr/local/bin/chromedriver
        USER_AGENT=Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36
        PICKUP_LOCATION=LIH
        PICKUP_DATE=04/03/2025
        DROPOFF_DATE=04/10/2025
        FOCUS_CATEGORY=Economy Car
        SMTP_SERVER=${{ secrets.SMTP_SERVER }}
        SMTP_PORT=${{ secrets.SMTP_PORT }}
        SENDER_EMAIL=${{ secrets.SENDER_EMAIL }}
        SENDER_PASSWORD=${{ secrets.SENDER_PASSWORD }}
        RECIPIENT_EMAIL=${{ secrets.RECIPIENT_EMAIL }}
        EOF

    - name: Verify email configuration
      run: |
        python << 'EOL'
        import os
        from dotenv import load_dotenv
        import smtplib
        from email.mime.text import MIMEText

        def verify_smtp():
            # Load environment variables from .env file
            load_dotenv()
            
            print("\nüìß Verifying email configuration...")
            
            # Get and verify all required variables
            required_vars = ['SMTP_SERVER', 'SMTP_PORT', 'SENDER_EMAIL', 'SENDER_PASSWORD', 'RECIPIENT_EMAIL']
            for var in required_vars:
                value = os.getenv(var)
                if not value:
                    raise ValueError(f"{var} is not set")
                if var != 'SENDER_PASSWORD':  # Don't print the password
                    print(f"{var}: {value}")

            smtp_server = os.getenv('SMTP_SERVER')
            smtp_port = int(os.getenv('SMTP_PORT'))  # Convert to int after verifying it exists
            sender_email = os.getenv('SENDER_EMAIL')
            sender_password = os.getenv('SENDER_PASSWORD')
            recipient_email = os.getenv('RECIPIENT_EMAIL')

            try:
                print(f"\nConnecting to {smtp_server}:{smtp_port}...")
                with smtplib.SMTP(smtp_server, smtp_port) as server:
                    server.starttls()
                    print("Starting TLS connection...")
                    server.login(sender_email, sender_password)
                    print("‚úÖ SMTP login successful!")
                    
                    # Send a test message
                    msg = MIMEText("SMTP Configuration test successful")
                    msg['Subject'] = 'SMTP Test - Car Rental Price Tracker'
                    msg['From'] = sender_email
                    msg['To'] = recipient_email
                    server.send_message(msg)
                    print("‚úÖ Test email sent successfully!")
                    return True
            except Exception as e:
                print(f"‚ùå SMTP verification failed: {str(e)}")
                raise

        verify_smtp()
        EOL

    - name: Run price checker
      run: |
        export CHROME_OPTIONS="--headless --no-sandbox --disable-dev-shm-usage --disable-gpu"
        python main.py

    - name: Save price history
      if: success() || failure()
      uses: actions/upload-artifact@v3
      with:
        name: price-history-${{ github.run_id }}
        path: |
          price_history.json
          rental_prices.txt
          screenshots/*.png

    - name: Clean up sensitive files
      if: always()
      run: rm -f .env