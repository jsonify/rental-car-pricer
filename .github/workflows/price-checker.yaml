name: Car Rental Price Tracker

on:
  schedule:
    - cron: '0 14 * * 1'  # Run every Monday at 6 AM PST (14:00 UTC)
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        type: choice
        options:
          - check-prices
          - add-booking
          - display-bookings
          - update-holding-prices
          - delete-booking
        required: true
        default: 'check-prices'
      new_booking_location:
        description: 'Airport code (e.g., KOA)'
        required: false
        type: string
      new_booking_pickup_date:
        description: 'Pickup date (MM/DD/YYYY)'
        required: false
        type: string
      new_booking_dropoff_date:
        description: 'Dropoff date (MM/DD/YYYY)'
        required: false
        type: string
      new_booking_category:
        description: 'Vehicle category (exact match from website)'
        required: false
        type: string
      new_booking_holding_price:
        description: 'Initial holding price (optional)'
        required: false
        type: string
      booking_updates_json:
        description: 'Updates as JSON array. Must include brackets and quotes. [booking_number, price, category(optional)]. Example: [1, 299.99, "Economy Car"] or [2, 399.99]'
        required: false
        type: string
      booking_to_delete:
        description: 'Booking number to delete (1-3)'
        required: false
        type: string

jobs:
  manage-bookings:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install python-dotenv selenium webdriver_manager

    - name: Setup Chrome and ChromeDriver
      if: github.event.inputs.action == 'check-prices' || github.event_name == 'schedule'
      run: |
        # Create Chrome directory
        sudo mkdir -p /opt/chrome
        
        # Get latest version
        LATEST_VERSION=$(curl -s https://googlechromelabs.github.io/chrome-for-testing/LATEST_RELEASE_STABLE)
        echo "Latest Chrome version: $LATEST_VERSION"
        
        # Download Chrome for Testing
        curl -L "https://storage.googleapis.com/chrome-for-testing-public/${LATEST_VERSION}/linux64/chrome-linux64.zip" -o chrome.zip
        sudo unzip -q chrome.zip -d /opt/chrome/
        sudo chmod +x /opt/chrome/chrome-linux64/chrome
        sudo ln -sf /opt/chrome/chrome-linux64/chrome /usr/bin/chrome
        
        # Download ChromeDriver
        curl -L "https://storage.googleapis.com/chrome-for-testing-public/${LATEST_VERSION}/linux64/chromedriver-linux64.zip" -o chromedriver.zip
        unzip -q chromedriver.zip
        sudo chmod +x chromedriver-linux64/chromedriver
        sudo mv chromedriver-linux64/chromedriver /usr/bin/chromedriver
        
        # Install Chrome dependencies - updated for Ubuntu Noble
        sudo apt-get update
        sudo apt-get install -y --no-install-recommends \
        libasound2t64 \
        libatk-bridge2.0-0 \
        libatk1.0-0 \
        libatspi2.0-0 \
        libcups2 \
        libdbus-1-3 \
        libdrm2 \
        libgbm1 \
        libgtk-3-0 \
        libnspr4 \
        libnss3 \
        libxcomposite1 \
        libxdamage1 \
        libxfixes3 \
        libxkbcommon0 \
        libxrandr2 \
        xdg-utils || true
        
        # Verify installations
        echo "Chrome version:"
        /usr/bin/chrome --version
        echo "ChromeDriver version:"
        /usr/bin/chromedriver --version

    - name: Add new booking
      if: github.event.inputs.action == 'add-booking'
      env:
        NEW_BOOKING_LOCATION: ${{ github.event.inputs.new_booking_location }}
        NEW_BOOKING_PICKUP_DATE: ${{ github.event.inputs.new_booking_pickup_date }}
        NEW_BOOKING_DROPOFF_DATE: ${{ github.event.inputs.new_booking_dropoff_date }}
        NEW_BOOKING_CATEGORY: ${{ github.event.inputs.new_booking_category }}
        NEW_BOOKING_HOLDING_PRICE: ${{ github.event.inputs.new_booking_holding_price }}
      run: |
        python - << 'EOL'
        import json
        import os
        from datetime import datetime
        import sys

        def validate_date(date_str):
            try:
                return bool(datetime.strptime(date_str, "%m/%d/%Y"))
            except ValueError:
                return False

        def add_booking():
            # Get environment variables
            location = os.environ.get('NEW_BOOKING_LOCATION', '').strip().upper()
            pickup_date = os.environ.get('NEW_BOOKING_PICKUP_DATE', '').strip()
            dropoff_date = os.environ.get('NEW_BOOKING_DROPOFF_DATE', '').strip()
            category = os.environ.get('NEW_BOOKING_CATEGORY', '').strip()
            holding_price = os.environ.get('NEW_BOOKING_HOLDING_PRICE', '').strip()

            print(f"Adding new booking with parameters:")
            print(f"Location: {location}")
            print(f"Pickup: {pickup_date}")
            print(f"Dropoff: {dropoff_date}")
            print(f"Category: {category}")
            print(f"Holding Price: {holding_price}")

            # Validate inputs
            if not location or len(location) != 3 or not location.isalpha():
                print(f"‚ùå Invalid airport code: {location}")
                return False
                
            if not validate_date(pickup_date):
                print(f"‚ùå Invalid pickup date: {pickup_date}")
                return False
                
            if not validate_date(dropoff_date):
                print(f"‚ùå Invalid dropoff date: {dropoff_date}")
                return False

            if not category:
                print("‚ùå Category is required")
                return False

            # Load or create price history
            try:
                with open('price_history.json', 'r') as f:
                    price_history = json.load(f)
                    print("Successfully loaded existing price_history.json")
            except FileNotFoundError:
                print("Creating new price_history.json")
                price_history = {
                    "metadata": {
                        "last_updated": datetime.now().isoformat(),
                        "active_bookings": []
                    },
                    "bookings": {}
                }

            # Create booking ID
            booking_id = f"{location}_{pickup_date}_{dropoff_date}".replace("/", "")

            # Create new booking
            new_booking = {
                "location": location,
                "location_full_name": f"{location} Airport",
                "pickup_date": pickup_date,
                "dropoff_date": dropoff_date,
                "pickup_time": "12:00 PM",
                "dropoff_time": "12:00 PM",
                "focus_category": category,
                "price_history": [],
                "created_at": datetime.now().isoformat()
            }

            if holding_price:
                try:
                    new_booking["holding_price"] = float(holding_price)
                except ValueError:
                    print(f"Warning: Invalid holding price format: {holding_price}")

            # Add to price history
            price_history["bookings"][booking_id] = new_booking
            if "active_bookings" not in price_history["metadata"]:
                price_history["metadata"]["active_bookings"] = []
            if booking_id not in price_history["metadata"]["active_bookings"]:
                price_history["metadata"]["active_bookings"].append(booking_id)

            # Save updated price history
            try:
                with open('price_history.json', 'w') as f:
                    json.dump(price_history, f, indent=2)
                print("Successfully saved updated price_history.json")
            except Exception as e:
                print(f"‚ùå Error saving price_history.json: {str(e)}")
                return False

            print(f"‚úÖ Successfully added new booking: {booking_id}")
            print(f"Location: {location}")
            print(f"Dates: {pickup_date} to {dropoff_date}")
            print(f"Category: {category}")
            if holding_price:
                print(f"Holding price: {float(holding_price):.2f}")
            return True

        if not add_booking():
            sys.exit(1)
        EOL

    - name: Display booking information
      if: github.event.inputs.action == 'display-bookings'
      run: |
        python - << 'EOL'
        import json
        from datetime import datetime

        def display_booking_details(price_history: dict) -> None:
            """Display detailed information about all bookings"""
            print("\nüöó Car Rental Bookings Overview")
            print("=" * 80)
            print(f"Last Updated: {price_history['metadata']['last_updated']}")
            print("-" * 80)
            
            for i, booking_id in enumerate(price_history['bookings'].keys(), 1):
                booking = price_history['bookings'][booking_id]
                print(f"\nBooking #{i}:")
                print(f"üìç Location: {booking['location']} ({booking['location_full_name']})")
                print(f"üìÖ Dates: {booking['pickup_date']} to {booking['dropoff_date']}")
                print(f"‚è∞ Times: {booking['pickup_time']} - {booking['dropoff_time']}")
                print(f"üöô Category: {booking['focus_category']}")
                
                if booking.get('holding_price'):
                    print(f"üí∞ Holding Price: ${booking['holding_price']:.2f}")
                
                # Show price history statistics if available
                if booking.get('price_history'):
                    prices = [record['lowest_price']['price'] for record in booking['price_history']]
                    if prices:
                        print("\nPrice Statistics:")
                        print(f"  Lowest: ${min(prices):.2f}")
                        print(f"  Highest: ${max(prices):.2f}")
                        print(f"  Average: ${sum(prices) / len(prices):.2f}")
                        print(f"  Checks: {len(prices)}")
                        
                        # Show most recent price
                        latest = booking['price_history'][-1]
                        print(f"\nLatest Check ({latest['timestamp'][:10]}):")
                        print(f"  Lowest Available: ${latest['lowest_price']['price']:.2f}")
                        print(f"  Category: {latest['lowest_price']['category']}")
                
                print("-" * 80)

            print("\nüí° Tips:")
            print("‚Ä¢ To update a booking price: use [booking_number, price]")
            print("‚Ä¢ To update price and category: use [booking_number, price, \"category\"]")
            print("Example: [1, 299.99, \"Economy Car\"]")

        try:
            with open('price_history.json', 'r') as f:
                price_history = json.load(f)
                
            display_booking_details(price_history)
            
        except FileNotFoundError:
            print("‚ùå No price history file found")
            exit(1)
        except Exception as e:
            print(f"‚ùå Error displaying booking information: {str(e)}")
            exit(1)
        EOL

    - name: Update holding prices
      if: github.event.inputs.action == 'update-holding-prices'
      env:
        BOOKING_UPDATES_JSON: ${{ github.event.inputs.booking_updates_json }}
      run: |
        python - <<EOF
        import json
        import os
        from datetime import datetime
        from typing import Optional, List, Union

        def parse_updates(updates_json: str) -> Optional[List]:
          """Parse and validate the updates array [booking_num, price, category?]"""
          try:
              # First try to fix common formatting issues
              updates_json = updates_json.strip()
              if not updates_json.startswith('['):
                  print("‚ùå Input must start with '['. Example: [1, 440.53, \"Intermediate SUV\"]")
                  return None
              if not updates_json.endswith(']'):
                  print("‚ùå Input must end with ']'. Example: [1, 440.53, \"Intermediate SUV\"]")
                  return None

              updates = json.loads(updates_json)
              if not isinstance(updates, list):
                  raise ValueError("Updates must be an array")
              if len(updates) < 2 or len(updates) > 3:
                  raise ValueError("Updates must contain 2 or 3 elements [booking_number, price, category?]")
              
              booking_num = int(updates[0])
              price = float(updates[1])
              category = updates[2] if len(updates) > 2 else None
              
              return [booking_num, price, category]
          except json.JSONDecodeError:
              print("‚ùå Invalid JSON format. Make sure to use proper quotes and brackets.")
              print("Example format: [1, 440.53, \"Intermediate SUV\"]")
              print("         or   : [1, 440.53]")
              return None
          except ValueError as e:
              print(f"‚ùå Error parsing updates: {str(e)}")
              print("Example format: [1, 440.53, \"Intermediate SUV\"]")
              return None
          except Exception as e:
              print(f"‚ùå Unexpected error parsing updates: {str(e)}")
              print("Example format: [1, 440.53, \"Intermediate SUV\"]")
              return None
        try:
            # Load price history
            with open('price_history.json', 'r') as f:
                price_history = json.load(f)

            # Get list of booking IDs
            booking_ids = list(price_history['bookings'].keys())
            
            # Get updates from JSON input
            updates_json = os.environ.get('BOOKING_UPDATES_JSON', '').strip()
            if not updates_json:
                print("‚ÑπÔ∏è No updates provided")
                exit(0)
                
            updates = parse_updates(updates_json)
            if updates is None:
                exit(1)
                
            booking_num, new_price, new_category = updates
            
            # Validate booking number
            if not 1 <= booking_num <= len(booking_ids):
                print(f"‚ùå Invalid booking number: {booking_num}")
                exit(1)
                
            # Get booking to update
            booking_id = booking_ids[booking_num - 1]
            booking = price_history['bookings'][booking_id]
            
            # Update booking
            updates_made = False
            
            # Update price
            booking['holding_price'] = new_price
            print(f"‚úÖ Updated Booking {booking_num} holding price to ${new_price:.2f}")
            updates_made = True
            
            # Update category if provided
            if new_category:
                booking['focus_category'] = new_category
                print(f"‚úÖ Updated Booking {booking_num} category to {new_category}")
                updates_made = True

            if updates_made:
                # Update last_updated timestamp
                price_history['metadata']['last_updated'] = datetime.now().isoformat()
                
                # Save updated price history
                with open('price_history.json', 'w') as f:
                    json.dump(price_history, f, indent=2)
                print("‚úÖ Successfully saved updated price history")

        except Exception as e:
            print(f"‚ùå Error updating booking details: {str(e)}")
            exit(1)
        EOF

    - name: Delete booking
      if: github.event.inputs.action == 'delete-booking'
      env:
        BOOKING_TO_DELETE: ${{ github.event.inputs.booking_to_delete }}
      run: |
        python delete_booking_cli.py
    
    - name: Setup Python services
      run: |
        mkdir -p services
        
        # Create __init__.py
        cat > services/__init__.py << 'EOL'
        """
        Services package for car rental price tracking application.
        Contains modular services for price alerts, data processing, and notifications.
        """

        from .price_alert_service import PriceAlertService

        __all__ = ['PriceAlertService']
        EOL
        
        # Create price_alert_service.py
        cat > services/price_alert_service.py << 'EOL'
        """
        Service responsible for managing price alerts based on booking data.
        Handles alert thresholds, expired booking filtering, and email notifications.
        """

        from datetime import datetime
        from typing import Dict, List, Optional
        import logging
        from email_module import send_price_alert

        class PriceAlertService:
            """Manages price alerts and threshold checking for car rental bookings"""
            
            def __init__(self, price_threshold: float = 10.0):
                """
                Initialize the price alert service
                
                Args:
                    price_threshold: Minimum price drop (in dollars) to trigger an alert
                """
                self.price_threshold = price_threshold
            
            def filter_active_bookings(self, bookings_data: List[Dict]) -> List[Dict]:
                """Filter out expired bookings based on dropoff date"""
                current_date = datetime.now().date()
                active_bookings = []
                
                for booking_data in bookings_data:
                    try:
                        booking = booking_data['booking']
                        dropoff_date = datetime.strptime(booking['dropoff_date'], "%m/%d/%Y").date()
                        
                        if dropoff_date >= current_date:
                            active_bookings.append(booking_data)
                        else:
                            print(f"Skipping expired booking: {booking.get('location')} - {booking['dropoff_date']}")
                    except (KeyError, ValueError) as e:
                        print(f"Error processing booking: {str(e)}")
                        continue
                
                return active_bookings
            
            def check_price_drops(self, bookings_data: List[Dict]) -> List[Dict]:
                """
                Check for significant price drops in bookings
                
                Returns:
                    List of bookings with price drops exceeding the threshold
                """
                significant_drops = []
                
                for booking_data in bookings_data:
                    try:
                        booking = booking_data['booking']
                        trends = booking_data.get('trends', {})
                        focus_trends = trends.get('focus_category', {})
                        
                        current_price = focus_trends.get('current')
                        previous_price = focus_trends.get('previous_price')
                        
                        if current_price is not None and previous_price is not None:
                            price_drop = previous_price - current_price
                            if price_drop >= self.price_threshold:
                                significant_drops.append(booking_data)
                                print(
                                    f"Significant price drop found for {booking.get('location')}: "
                                    f"${price_drop:.2f}"
                                )
                    except Exception as e:
                        print(f"Error checking price drops: {str(e)}")
                        continue
                
                return significant_drops
            
            def send_alerts(self, bookings_data: List[Dict]) -> bool:
                """
                Process bookings and send alerts if significant price drops are found
                
                Returns:
                    bool: True if alerts were sent successfully, False otherwise
                """
                try:
                    # Filter out expired bookings
                    active_bookings = self.filter_active_bookings(bookings_data)
                    
                    if not active_bookings:
                        print("No active bookings to process")
                        return True
                    
                    # Check for significant price drops
                    bookings_with_drops = self.check_price_drops(active_bookings)
                    
                    if bookings_with_drops:
                        print(f"Sending alerts for {len(bookings_with_drops)} price drops")
                        return send_price_alert(bookings_with_drops)
                    else:
                        print("No significant price drops found")
                        return True
                        
                except Exception as e:
                    print(f"Error sending price alerts: {str(e)}")
                    return False
        EOL

    - name: Setup email module structure
      run: |
        # Create required directories
        mkdir -p email_module/templates
        mkdir -p email_module/styles
        touch email_module/__init__.py
        touch email_module/templates/__init__.py
        touch email_module/styles/__init__.py
        
        # Verify structure
        echo "Checking project structure..."
        ls -R email_module/
        
        echo "Checking if key files exist..."
        test -f "email_module/templates/html_template.py" || echo "Missing html_template.py"
        test -f "email_module/templates/formatters.py" || echo "Missing formatters.py"
        test -f "email_module/styles/css_styles.py" || echo "Missing css_styles.py"

    - name: Run price checker
      if: github.event.inputs.action == 'check-prices' || github.event_name == 'schedule'
      env:
        CI: true
        CHROME_BINARY_PATH: /usr/bin/chrome
        CHROMEDRIVER_PATH: /usr/bin/chromedriver
        USER_AGENT: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36
        SMTP_SERVER: ${{ secrets.SMTP_SERVER }}
        SMTP_PORT: ${{ secrets.SMTP_PORT }}
        SENDER_EMAIL: ${{ secrets.SENDER_EMAIL }}
        SENDER_PASSWORD: ${{ secrets.SENDER_PASSWORD }}
        RECIPIENT_EMAIL: ${{ secrets.RECIPIENT_EMAIL }}
        SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        SUPABASE_SERVICE_KEY: ${{ secrets.SUPABASE_SERVICE_KEY }}
      run: |
        # Create screenshots directory
        mkdir -p screenshots
        
        # Debug Python environment
        echo "Python version:"
        python -V
        
        echo "Project structure:"
        ls -R
        
        # Verify email template imports
        python - << 'EOL'
        import sys
        import traceback
        try:
            from email_module.templates.html_template import format_email_body_html
            from email_module.templates.formatters import format_email_body_text
            print('‚úÖ Successfully imported email templates')
        except Exception as e:
            print('‚ùå Error importing email templates:')
            traceback.print_exc()
            sys.exit(1)
        EOL
        
        # Get first active booking details and setup environment
        python - << 'EOL'
        import json
        import os
        
        try:
            with open('price_history.json', 'r') as f:
                data = json.load(f)
                
            active_bookings = data.get('metadata', {}).get('active_bookings', [])
            if active_bookings:
                booking = data['bookings'][active_bookings[0]]
                with open('.env', 'w') as f:
                    f.write(f"CI=true\n")
                    f.write(f"CHROME_BINARY_PATH=/usr/bin/chrome\n")
                    f.write(f"CHROMEDRIVER_PATH=/usr/bin/chromedriver\n")
                    f.write(f"USER_AGENT=Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36\n")
                    f.write(f"PICKUP_LOCATION={booking['location']}\n")
                    f.write(f"PICKUP_DATE={booking['pickup_date']}\n")
                    f.write(f"DROPOFF_DATE={booking['dropoff_date']}\n")
                    f.write(f"FOCUS_CATEGORY={booking['focus_category']}\n")
                    f.write(f"PICKUP_TIME={booking.get('pickup_time', '12:00 PM')}\n")
                    f.write(f"DROPOFF_TIME={booking.get('dropoff_time', '12:00 PM')}\n")
                    f.write(f"SMTP_SERVER={os.environ.get('SMTP_SERVER', '')}\n")
                    f.write(f"SMTP_PORT={os.environ.get('SMTP_PORT', '')}\n")
                    f.write(f"SENDER_EMAIL={os.environ.get('SENDER_EMAIL', '')}\n")
                    f.write(f"SENDER_PASSWORD={os.environ.get('SENDER_PASSWORD', '')}\n")
                    f.write(f"RECIPIENT_EMAIL={os.environ.get('RECIPIENT_EMAIL', '')}\n")
                print("‚úÖ Successfully created .env file with booking details")
            else:
                print("‚ùå No active bookings found")
                exit(1)
        except Exception as e:
            print(f"‚ùå Error setting up environment: {str(e)}")
            exit(1)
        EOL
        
        # Show contents of .env file (excluding sensitive data)
        echo "Generated .env file contents (sanitized):"
        grep -v "PASSWORD\|EMAIL\|SERVER" .env || true
        
        # Run main script
        python main.py || {
          echo "‚ùå Error running price checker"
          exit 1
        }

    - name: Update Supabase
      if: github.event.inputs.action == 'check-prices' || github.event_name == 'schedule'
      env:
        SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        SUPABASE_SERVICE_KEY: ${{ secrets.SUPABASE_SERVICE_KEY }}
      run: python supabase_updater.py

    - name: Commit and push changes
      if: github.event.inputs.action == 'add-booking' || github.event.inputs.action == 'update-holding-prices' || github.event.inputs.action == 'delete-booking'
      run: |
        git config --global user.name "GitHub Actions Bot"
        git config --global user.email "actions@github.com"
        
        if git diff --quiet price_history.json; then
          echo "No changes to commit"
        else
          git add price_history.json
          git commit -m "Update price history via workflow"
          git push origin HEAD:${{ github.ref }}
        fi