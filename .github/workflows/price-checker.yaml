name: Car Rental Price Tracker

on:
  schedule:
    - cron: '0 14 * * 1'  # Run every Monday at 6 AM PST (14:00 UTC)
  workflow_dispatch:
    inputs:
      update_holding_prices:
        description: 'Do you want to update any holding prices?'
        type: boolean
        default: false
        required: true

jobs:
  initialize:
    runs-on: ubuntu-latest
    outputs:
      input_fields: ${{ steps.generate_inputs.outputs.fields }}
      booking_count: ${{ steps.generate_inputs.outputs.booking_count }}
    steps:
      - uses: actions/checkout@v3
      
      - name: Generate dynamic inputs
        id: generate_inputs
        run: |
          # Create Python script to generate inputs
          cat << 'EOF' > generate_inputs.py
          import json
          import os
          
          def format_booking_label(booking):
              return f"{booking['location']} {booking['focus_category']} ({booking['pickup_date']} - {booking['dropoff_date']})"
          
          # Load price history
          with open('price_history.json', 'r') as f:
              price_history = json.load(f)
          
          # Generate input fields for each active booking
          input_fields = {}
          for booking_id, booking in price_history.get('bookings', {}).items():
              field_name = f"holding_price_{booking_id}"
              label = format_booking_label(booking)
              current_price = booking.get('holding_price', 'N/A')
              description = f"Update holding price for {label} (current: ${current_price:.2f})" if isinstance(current_price, (int, float)) else f"Update holding price for {label} (current: {current_price})"
              
              input_fields[field_name] = {
                  "description": description,
                  "required": False,
                  "type": "string"
              }
          
          # Save the mapping for later use
          with open('input_mapping.json', 'w') as f:
              json.dump(input_fields, f, indent=2)
          
          # Output the fields in GitHub Actions format
          with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
              f.write(f"fields={json.dumps(input_fields)}\n")
              f.write(f"booking_count={len(input_fields)}\n")
          EOF
          
          python generate_inputs.py

  check-prices:
    needs: initialize
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Download and install Chrome for Testing
      run: |
        # Create Chrome directory
        sudo mkdir -p /opt/chrome
        
        # Get latest version
        LATEST_VERSION=$(curl -s https://googlechromelabs.github.io/chrome-for-testing/LATEST_RELEASE_STABLE)
        echo "Latest Chrome version: $LATEST_VERSION"
        
        # Download Chrome for Testing
        curl -L "https://storage.googleapis.com/chrome-for-testing-public/${LATEST_VERSION}/linux64/chrome-linux64.zip" -o chrome.zip
        
        # Extract Chrome to /opt/chrome
        sudo unzip -q chrome.zip -d /opt/chrome/
        
        # Make executable and create symlink
        sudo chmod +x /opt/chrome/chrome-linux64/chrome
        sudo ln -sf /opt/chrome/chrome-linux64/chrome /usr/bin/chrome
        
        # Verify installation
        echo "Chrome binary location:"
        ls -l /opt/chrome/chrome-linux64/chrome
        echo "Chrome version:"
        /opt/chrome/chrome-linux64/chrome --version

    - name: Download and install ChromeDriver
      run: |
        LATEST_VERSION=$(curl -s https://googlechromelabs.github.io/chrome-for-testing/LATEST_RELEASE_STABLE)
        echo "Installing ChromeDriver for Chrome version: $LATEST_VERSION"
        curl -L "https://storage.googleapis.com/chrome-for-testing-public/${LATEST_VERSION}/linux64/chromedriver-linux64.zip" -o chromedriver.zip
        unzip -q chromedriver.zip
        sudo chmod +x chromedriver-linux64/chromedriver
        sudo mv chromedriver-linux64/chromedriver /usr/bin/chromedriver
        
        # Verify installation
        echo "ChromeDriver location:"
        which chromedriver
        echo "ChromeDriver version:"
        chromedriver --version

    - name: Install Chrome dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libnss3 libgdk-pixbuf2.0-0 libgtk-3-0 libxss1 libasound2

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        sudo apt-get update
        sudo apt-get install -y jq

    - name: Create screenshots directory
      run: mkdir -p screenshots

    - name: Display current bookings
      run: |
        # Create Python script to display bookings
        cat << 'EOF' > display_bookings.py
        import json
        from datetime import datetime
        
        def format_price(price):
            try:
                return f"${float(price):.2f}"
            except:
                return "N/A"
        
        # Load current price history
        with open('price_history.json', 'r') as f:
            price_history = json.load(f)
        
        # Display bookings in a formatted table
        print("\n=== Current Bookings ===")
        print("{:<20} {:<15} {:<20} {:<15} {:<15}".format(
            "Location", "Category", "Dates", "Current Price", "Last Updated"
        ))
        print("-" * 85)
        
        for booking_id, booking in price_history.get('bookings', {}).items():
            print("{:<20} {:<15} {:<20} {:<15} {:<15}".format(
                booking['location'],
                booking['focus_category'],
                f"{booking['pickup_date']} to\n{booking['dropoff_date']}",
                format_price(booking.get('holding_price', 'N/A')),
                datetime.now().strftime('%Y-%m-%d')
            ))
        EOF
        
        python display_bookings.py

    - name: Update holding prices
      if: github.event.inputs.update_holding_prices == 'true'
      run: |
        # Create Python script to update prices
        cat << 'EOF' > update_prices.py
        import json
        import os
        
        # Load the current price history
        with open('price_history.json', 'r') as f:
            price_history = json.load(f)
        
        # Track updates
        updates_made = False
        
        # Process each booking
        for booking_id, booking in price_history['bookings'].items():
            env_var = f"HOLDING_PRICE_{booking_id}"
            new_price = os.getenv(env_var, '').strip()
            
            if new_price:
                try:
                    new_price_float = float(new_price)
                    old_price = booking.get('holding_price')
                    price_history['bookings'][booking_id]['holding_price'] = new_price_float
                    
                    print(f"✅ Updated {booking['location']} {booking['focus_category']}:")
                    print(f"   Old price: {format_price(old_price)}")
                    print(f"   New price: ${new_price_float:.2f}")
                    updates_made = True
                except ValueError:
                    print(f"❌ Invalid price format for {booking['location']}: {new_price}")
        
        if updates_made:
            # Save the updated price history
            with open('price_history.json', 'w') as f:
                json.dump(price_history, f, indent=2)
            print("\nSuccessfully updated price_history.json")
        else:
            print("\nNo price updates were made")
        
        def format_price(price):
            try:
                return f"${float(price):.2f}"
            except:
                return "N/A"
        EOF
        
        # Set environment variables for each booking price
        # This will be populated based on the dynamic inputs
        python update_prices.py
        
        # Show updated prices
        echo "\nCurrent booking prices after updates:"
        jq -r '.bookings | to_entries[] | "\(.value.location) \(.value.focus_category): \(.value.holding_price)"' price_history.json

    - name: Extract environment variables
      run: |
        # Extract all booking locations to check
        jq -r '.bookings | to_entries[] | .value.location' price_history.json > locations.txt
        echo "Found the following locations to check:"
        cat locations.txt

    - name: Set up environment file
      run: |
        cat << EOF > .env
        CI=true
        CHROME_BINARY_PATH=/opt/chrome/chrome-linux64/chrome
        CHROMEDRIVER_PATH=/usr/bin/chromedriver
        USER_AGENT=Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36
        SMTP_SERVER=${{ secrets.SMTP_SERVER }}
        SMTP_PORT=${{ secrets.SMTP_PORT }}
        SENDER_EMAIL=${{ secrets.SENDER_EMAIL }}
        SENDER_PASSWORD=${{ secrets.SENDER_PASSWORD }}
        RECIPIENT_EMAIL=${{ secrets.RECIPIENT_EMAIL }}
        EOF
        
        echo "Environment file created. Verifying contents (excluding secrets):"
        grep -v "PASSWORD" .env || true

    - name: Run price checker
      env:
        CI: true
        CHROME_BINARY_PATH: /opt/chrome/chrome-linux64/chrome
        CHROMEDRIVER_PATH: /usr/bin/chromedriver
        USER_AGENT: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36
        SMTP_SERVER: ${{ secrets.SMTP_SERVER }}
        SMTP_PORT: ${{ secrets.SMTP_PORT }}
        SENDER_EMAIL: ${{ secrets.SENDER_EMAIL }}
        SENDER_PASSWORD: ${{ secrets.SENDER_PASSWORD }}
        RECIPIENT_EMAIL: ${{ secrets.RECIPIENT_EMAIL }}
      run: |
        echo "Starting price checker in automated mode..."
        export CHROME_OPTIONS="--headless --no-sandbox --disable-dev-shm-usage --disable-gpu"
        python main.py

    - name: Save price history
      if: success() || failure()
      uses: actions/upload-artifact@v3
      with:
        name: price-history-${{ github.run_id }}
        path: |
          price_history.json
          rental_prices.txt
          screenshots/*.png

    - name: Clean up sensitive files
      if: always()
      run: rm -f .env update_prices.py