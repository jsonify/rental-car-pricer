name: Car Rental Price Tracker

on:
  schedule:
    - cron: '0 14 * * 1'  # Run every Monday at 6 AM PST (14:00 UTC)
  workflow_dispatch:
    inputs:
      holding_prices:
        description: 'JSON string of booking IDs and holding prices, e.g., {"LIH_04032025_04102025": "299.99", "KOA_05012025_05082025": "399.99"}'
        required: false
        type: string
        default: '{}'

jobs:
  check-prices:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Download and install Chrome for Testing
      run: |
        # Create Chrome directory
        sudo mkdir -p /opt/chrome
        
        # Get latest version
        LATEST_VERSION=$(curl -s https://googlechromelabs.github.io/chrome-for-testing/LATEST_RELEASE_STABLE)
        echo "Latest Chrome version: $LATEST_VERSION"
        
        # Download Chrome for Testing
        curl -L "https://storage.googleapis.com/chrome-for-testing-public/${LATEST_VERSION}/linux64/chrome-linux64.zip" -o chrome.zip
        
        # Extract Chrome to /opt/chrome
        sudo unzip -q chrome.zip -d /opt/chrome/
        
        # Make executable and create symlink
        sudo chmod +x /opt/chrome/chrome-linux64/chrome
        sudo ln -sf /opt/chrome/chrome-linux64/chrome /usr/bin/chrome
        
        # Verify installation
        echo "Chrome binary location:"
        ls -l /opt/chrome/chrome-linux64/chrome
        echo "Chrome version:"
        /opt/chrome/chrome-linux64/chrome --version

    - name: Download and install ChromeDriver
      run: |
        LATEST_VERSION=$(curl -s https://googlechromelabs.github.io/chrome-for-testing/LATEST_RELEASE_STABLE)
        echo "Installing ChromeDriver for Chrome version: $LATEST_VERSION"
        curl -L "https://storage.googleapis.com/chrome-for-testing-public/${LATEST_VERSION}/linux64/chromedriver-linux64.zip" -o chromedriver.zip
        unzip -q chromedriver.zip
        sudo chmod +x chromedriver-linux64/chromedriver
        sudo mv chromedriver-linux64/chromedriver /usr/bin/chromedriver
        
        # Verify installation
        echo "ChromeDriver location:"
        which chromedriver
        echo "ChromeDriver version:"
        chromedriver --version

    - name: Install Chrome dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libnss3 libgdk-pixbuf2.0-0 libgtk-3-0 libxss1 libasound2

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Create screenshots directory
      run: mkdir -p screenshots

    - name: Install jq
      run: sudo apt-get install -y jq

    - name: List current bookings
      id: list_bookings
      run: |
        echo "Current bookings in price_history.json:"
        jq -r '.bookings | to_entries[] | "\(.key): Location=\(.value.location), Dates=\(.value.pickup_date)-\(.value.dropoff_date), Current Holding Price=\(.value.holding_price)"' price_history.json

    - name: Update holding prices
      id: update_prices
      run: |
        if [ "${{ github.event.inputs.holding_prices }}" != "{}" ]; then
          echo "Updating holding prices..."
          
          # Create a temporary Python script to update the JSON
          cat << 'EOF' > update_prices.py
        import json
        import sys
        
        # Load the current price history
        with open('price_history.json', 'r') as f:
            price_history = json.load(f)
        
        # Load the new holding prices
        new_prices = json.loads(sys.argv[1])
        
        # Update each booking's holding price
        updates_made = False
        for booking_id, new_price in new_prices.items():
            if booking_id in price_history['bookings']:
                try:
                    price_history['bookings'][booking_id]['holding_price'] = float(new_price)
                    print(f"✅ Updated {booking_id} holding price to ${new_price}")
                    updates_made = True
                except ValueError:
                    print(f"❌ Invalid price format for {booking_id}: {new_price}")
            else:
                print(f"❌ Booking ID not found: {booking_id}")
        
        if updates_made:
            # Save the updated price history
            with open('price_history.json', 'w') as f:
                json.dump(price_history, f, indent=2)
            print("\nUpdated price_history.json successfully")
        EOF
        
          # Run the Python script with the holding prices JSON
          python update_prices.py '${{ github.event.inputs.holding_prices }}'
          
          echo "Current bookings after updates:"
          jq -r '.bookings | to_entries[] | "\(.key): Location=\(.value.location), Dates=\(.value.pickup_date)-\(.value.dropoff_date), Updated Holding Price=\(.value.holding_price)"' price_history.json
        else
          echo "No holding price updates provided"
        fi

    - name: Extract environment variables
      run: |
        # Extract all booking locations to check
        jq -r '.bookings | to_entries[] | .value.location' price_history.json > locations.txt
        echo "Found the following locations to check:"
        cat locations.txt

    - name: Set up environment file
      run: |
        cat << EOF > .env
        CI=true
        CHROME_BINARY_PATH=/opt/chrome/chrome-linux64/chrome
        CHROMEDRIVER_PATH=/usr/bin/chromedriver
        USER_AGENT=Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36
        SMTP_SERVER=${{ secrets.SMTP_SERVER }}
        SMTP_PORT=${{ secrets.SMTP_PORT }}
        SENDER_EMAIL=${{ secrets.SENDER_EMAIL }}
        SENDER_PASSWORD=${{ secrets.SENDER_PASSWORD }}
        RECIPIENT_EMAIL=${{ secrets.RECIPIENT_EMAIL }}
        EOF
        
        echo "Environment file created. Verifying contents (excluding secrets):"
        grep -v "PASSWORD" .env || true

    - name: Run price checker
      env:
        CI: true
        CHROME_BINARY_PATH: /opt/chrome/chrome-linux64/chrome
        CHROMEDRIVER_PATH: /usr/bin/chromedriver
        USER_AGENT: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36
        SMTP_SERVER: ${{ secrets.SMTP_SERVER }}
        SMTP_PORT: ${{ secrets.SMTP_PORT }}
        SENDER_EMAIL: ${{ secrets.SENDER_EMAIL }}
        SENDER_PASSWORD: ${{ secrets.SENDER_PASSWORD }}
        RECIPIENT_EMAIL: ${{ secrets.RECIPIENT_EMAIL }}
      run: |
        echo "Starting price checker in automated mode..."
        export CHROME_OPTIONS="--headless --no-sandbox --disable-dev-shm-usage --disable-gpu"
        python main.py

    - name: Save price history
      if: success() || failure()
      uses: actions/upload-artifact@v3
      with:
        name: price-history-${{ github.run_id }}
        path: |
          price_history.json
          rental_prices.txt
          screenshots/*.png

    - name: Clean up sensitive files
      if: always()
      run: rm -f .env update_prices.py